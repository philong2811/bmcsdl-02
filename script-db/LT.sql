CREATE TABLE users (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username      VARCHAR2(50) NOT NULL,
    password      VARCHAR2(255) NOT NULL,
    role          VARCHAR2(20) NOT NULL,
    cmnd          VARCHAR2(20),
    district      VARCHAR2(100),
    created_at    TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    created_by    NUMBER,
    updated_at    TIMESTAMP WITH TIME ZONE,
    updated_by    NUMBER,
    CONSTRAINT uk_users_username UNIQUE (username),
    CONSTRAINT chk_users_role CHECK (role IN ('USER','ADMIN','OPERATOR'))
);

CREATE INDEX idx_users_cmnd ON users(cmnd);

CREATE TABLE renewal (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cmnd          VARCHAR2(20) NOT NULL,
    pass_id       NUMBER,
    create_date   DATE DEFAULT SYSDATE NOT NULL,
    status        VARCHAR2(20) DEFAULT 'PENDING' NOT NULL,
    district      VARCHAR2(100),
    verified_by   NUMBER,
    verified_at   TIMESTAMP WITH TIME ZONE,
    approved_by   NUMBER,
    approved_at   TIMESTAMP WITH TIME ZONE,
    descriptions  VARCHAR2(1000),
    created_at    TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at    TIMESTAMP WITH TIME ZONE,
    CONSTRAINT chk_renewal_status CHECK (status IN ('PENDING','VERIFIED','APPROVED','REJECTED')),
    CONSTRAINT fk_renewal_verified_by FOREIGN KEY (verified_by) REFERENCES users(id),
    CONSTRAINT fk_renewal_approved_by FOREIGN KEY (approved_by) REFERENCES users(id)
);

CREATE INDEX idx_renewal_cmnd_status ON renewal(cmnd, status);

CREATE OR REPLACE TRIGGER trg_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER trg_renewal_updated_at
BEFORE UPDATE ON renewal
FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE VIEW v_renewal_overview AS
SELECT r.id,
       r.cmnd,
       r.pass_id,
       r.create_date,
       r.status,
       r.district,
       u_verified.username    AS verified_by_username,
       u_approved.username    AS approved_by_username,
       r.descriptions,
       r.created_at,
       r.updated_at
FROM renewal r
LEFT JOIN users u_verified ON r.verified_by = u_verified.id
LEFT JOIN users u_approved ON r.approved_by = u_approved.id;
